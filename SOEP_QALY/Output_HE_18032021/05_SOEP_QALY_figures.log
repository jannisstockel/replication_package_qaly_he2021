------------------------------------------------------------------------------------------------------------------------
      name:  <unnamed>
       log:  C:\Users\sebbs\surfdrive\Shared\SOEP _DataPreparation\SOEP_QALY\Output/05_SOEP_QALY_figures.log
  log type:  text
 opened on:  18 Mar 2021, 15:59:01

. *===============================================================================
. * BEGIN PROGRAM
. *===============================================================================
. 
. *-------------------------------------------------------------------------------
. * UK vs Dutch Tariff figure 
. *-------------------------------------------------------------------------------
. 
. use             "./Data_panel/SOEP_merged_finalIMPUTATION.dta", replace 
(SOEP-Core, v35, doi:10.5684/soep-core.v35)

. 
. preserve

. drop    if      valid==0                                
(93,451 observations deleted)

.                                 
. sum             sf12ind_UK 

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
  sf12ind_UK |     93,451    .7254075    .1355315       .345          1

. local   uk_mean = r(mean)

. 
. sum             sf12ind_NL 

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
  sf12ind_NL |     93,451    .5536128    .3002268  -.6199999          1

. local   nl_mean = r(mean)

.                                                                 
. graph twoway (hist sf12ind_UK, color(black%20) width(0.05)) (hist sf12ind_NL, fcolor(none) lcolor(black) width(0.05)),
>  ///
>                                 graphregion(color(white)) ytitle("Density") xtitle("SF-6D Utility") ///
>                                 legend(col(1) ring(0) position(11) order(1 "UK-Tariff" 2 "NL-Tariff") symxsize(4)) ///
>                                 xline(`uk_mean', lcol("black%35") lpattern(dash_dot)) xline(`nl_mean', lcol(black) lpa
> ttern(dash_dot))

.                                 
.                                 
. graph export    "./Output/Graphs/figure2.png", replace
(file ./Output/Graphs/figure2.png written in PNG format)

. restore

. 
. *-------------------------------------------------------------------------------
. * Distribution of Incomes Across Industry, Figure A3.1 and A3.2
. *-------------------------------------------------------------------------------
. 
. drop if industry==. | occupation==.
(81,595 observations deleted)

. 
. * Calculate Numbers on industry-occupation cells 
. tostring industry, generate(industry_strg) // make industry/occupation to string
industry_strg generated as str2

. tostring occupation, generate(occupation_strg)
occupation_strg generated as str2

. 
. gen     ind_occ_cell = industry_strg + occupation_strg // create unique industry occupation cell

. 
. local level "industry occupation ind_occ_cell"

. 
. * Cell populations: Unique individuals
. foreach x of local level {
  2.         
.         preserve
  3.         sort    pid `x' 
  4.         by              pid `x': keep if _n==1
  5. 
.         collapse (count) n = pid, by(`x')
  6.         
.         sum n, detail
  7.         restore
  8.         
. }
(78,900 observations deleted)

                         (count) pid
-------------------------------------------------------------
      Percentiles      Smallest
 1%           36             36
 5%           61             61
10%          144             97       Obs                  31
25%          241            144       Sum of Wgt.          31

50%          547                      Mean           851.8387
                        Largest       Std. Dev.      835.6815
75%         1110           2104
90%         2104           2607       Variance       698363.6
95%         2730           2730       Skewness         1.4592
99%         3237           3237       Kurtosis       4.246628
(78,629 observations deleted)

                         (count) pid
-------------------------------------------------------------
      Percentiles      Smallest
 1%           36             36
 5%          128            128
10%          190            190       Obs                  22
25%          258            206       Sum of Wgt.          22

50%        535.5                      Mean           1212.636
                        Largest       Std. Dev.      1334.247
75%         1780           2885
90%         3367           3367       Variance        1780214
95%         3855           3855       Skewness       1.228723
99%         4492           4492       Kurtosis       3.232816
(73,998 observations deleted)

                         (count) pid
-------------------------------------------------------------
      Percentiles      Smallest
 1%            1              1
 5%            1              1
10%            1              1       Obs                 456
25%          2.5              1       Sum of Wgt.         456

50%         15.5                      Mean           68.66009
                        Largest       Std. Dev.      143.4518
75%           64            830
90%          171            909       Variance       20578.41
95%          326            919       Skewness       4.172061
99%          715           1337       Kurtosis       25.58979

. 
. * Cell populations: Individual-year observations
. foreach x of local level {
  2.         
.         preserve
  3.         collapse (count) n = pid, by(`x')
  4.         
.         sum n, detail
  5.         restore
  6.         
. }

                         (count) pid
-------------------------------------------------------------
      Percentiles      Smallest
 1%           86             86
 5%          237            237
10%          532            394       Obs                  31
25%          877            532       Sum of Wgt.          31

50%         1997                      Mean               3397
                        Largest       Std. Dev.       3577.14
75%         4205           9351
90%         9351           9377       Variance       1.28e+07
95%        10219          10219       Skewness       1.563652
99%        14631          14631       Kurtosis       4.714113

                         (count) pid
-------------------------------------------------------------
      Percentiles      Smallest
 1%          176            176
 5%          431            431
10%          691            691       Obs                  22
25%         1036            710       Sum of Wgt.          22

50%       2246.5                      Mean           4786.682
                        Largest       Std. Dev.      5317.868
75%         7182          11977
90%        13234          13234       Variance       2.83e+07
95%        14101          14101       Skewness       1.304582
99%        18891          18891       Kurtosis       3.589187

                         (count) pid
-------------------------------------------------------------
      Percentiles      Smallest
 1%            1              1
 5%            1              1
10%            2              1       Obs                 456
25%            6              1       Sum of Wgt.         456

50%           40                      Mean           230.9364
                        Largest       Std. Dev.      536.8235
75%        204.5           3318
90%          564           3885       Variance       288179.5
95%         1070           4255       Skewness       4.657425
99%         3109           4607       Kurtosis       29.51253

. 
. * Generate hourly and predicted weekly net labour income
. gen             hourly_earnings         = net_labour_inc/wrkhrs

. gen     net_fulltime_inc        = hourly_earnings * 40 

. 
. * Collapse to industry level mean + standard deviation + N in cell
. preserve

. collapse (mean) mean_netto = net_fulltime_inc (sd) sd_netto = net_fulltime_inc (count) n = net_labour_inc, by(industry
> )

. 
. * Generate Super-Industry Groups 
. gen     industry_sector = 1 if industry<=6 
(25 missing values generated)

. replace industry_sector = 2 if industry>6 & industry<=20 
(14 real changes made)

. replace industry_sector = 3 if industry>= 21
(11 real changes made)

. 
. label define industry_sectors 1 "Agriculture/Resource Production" 2 "Manufacturing" 3 "Services"

. label values industry_sector industry_sectors

. 
. * Sort in ascending order within industry sectors 
. sort industry_sector mean_netto

. gen  id = _n 

. 
. replace id = id + 1     if industry_sector == 2
(14 real changes made)

. replace id = id + 2     if industry_sector == 3
(11 real changes made)

. 
. * Generate upper/lower CI
. gen high_netto= mean_netto + invttail(n-1,0.025)*(sd_netto / sqrt(n))

. gen low_netto = mean_netto - invttail(n-1,0.025)*(sd_netto / sqrt(n))

. 
. * Attach labels to ranked IDs
. label define industries_ranked 1 "Agriculture" 6 "Mining" 4 "Construction" 2 "Wood" 3 "Stone/Glass" /// 
>                                                 5 "Metal"  7 " " /// Agriculture/Resources
>                                                 21 "Non-electrical machinery" 18 "Electronics" 19 "Transportation equi
> pment"  ///
>                                                 10 "Professional equipment" 14 "Food/Tobacco" 9 "Clothing" ///
>                                                 11 "Paper" 13 "Printing" 20 "Chemicals" 15 "Petroleum/Rubber" /// 
>                                                 8 "Other manufacturing" 12 "Transportation" 16 "Telecommunication" ///
>                                                 17 "Utilities" 22 " " /// Manufacturing
>                                                 27 "Wholesale trade" 25 "Retail trade" 33 "Finance/Insurance" /// 
>                                                 30 "Business services" 24 "Personal/repair services" ///
>                                                 29 "Recreational services" 28 "Healthcare" 32 "Education" ///
>                                                 26 "Other" 31 "Public administration" 23 "Hospitality"

.                                                 
. label values id industries_ranked

. 
. * Generate Plot
. twoway (scatter mean_netto id, msize(small) msymbol(oh) col("black%85")) ///
>            (rcap high_netto low_netto id, msize(medlarge) lwidth(vthin) col("black%40")) ///
>            , graphregion(col(white)) yscale(range(1 3)) ylabel(1(0.5)3, nogrid) xscale(range(1 33)) /// 
>            xlabel(1(1)33, valuelabel angle(45) labsize(vsmall)) xtitle("") ///
>            ytitle("Monthly Earnings in 1,000€") /// 
>            legend(region(col(white)) col(1) ring(0) position(5) /// 
>            order(1 "Mean" 2 "95%-CI") size(vsmall) symxsize(6)) /// 
>            text(2.85 3.5 "{subscript:|}{superscript:__________________}{subscript:|}", orientation(horizontal)) ///
>            text(3.05 3.5 "Agriculture &",  place(c) size(vsmall)) text(2.95 3.5 "Resource Production",  place(c) size(
> vsmall)) ///      
>            text(2.55 14.5 "{subscript:|}{superscript:______________________________________________}{subscript:|}", or
> ientation(horizontal)) ///
>            text(2.65 14.5 "Manufacturing",  place(c) size(vsmall))   ///
>            text(2.45 28 "{subscript:|}{superscript:____________________________________}{subscript:|}", orientation(ho
> rizontal)) ///
>            text(2.55 28 "Services",  place(c) size(vsmall))                             

. 
. graph export "./Output/Graphs/figureA3_1.png", replace                          
(file ./Output/Graphs/figureA3_1.png written in PNG format)

. 
. restore 

. 
. * Collapse to occupation level mean + standard deviation + N in cell
. collapse (mean) mean_netto = net_fulltime_inc (sd) sd_netto = net_fulltime_inc (count) n = net_labour_inc, by(occupati
> on)

. 
. * Generate upper/lower CI
. gen high_netto= mean_netto + invttail(n-1,0.025)*(sd_netto / sqrt(n))

. gen low_netto = mean_netto - invttail(n-1,0.025)*(sd_netto / sqrt(n))

. 
. * Generate new ID ranked by income
. sort mean_netto 

. gen             id = _n 

. 
. * Attach labels to ranked IDs
. label define occupations_ranked 14 "Managerial" 19 "Engineers" 16 "IT Professional" /// 
>                                                 15 "Natural Scientist" 22 "Medical Professional" 9 "Caregiver/Nurse" /
> //
>                                                 20 "Post-secondary teachers" 18 "Other teachers" 10 "Counsellors/Libra
> rians" ///
>                                                 17 "Social scientists/Urban planners" 8 "Social/Religous workers" ///
>                                                 21 "Lawyers/Judges" 12 "Writers/Artists" 11 "Technicians/Supporting oc
> cupations" /// 
>                                                 5 "Sales occupations" 7 "Clerical/Administrative support" 3 "Private h
> ousehold workers" ///
>                                                 13 "Protective services workers" 2 "Other service workers" ///
>                                                 1 "Farmers" 6 "Crafts/repair workers" 4 "Operators/Laborers"

.                                                 
. label values id occupations_ranked              

.         
. * Create Plot
. twoway (scatter mean_netto id, msize(small) msymbol(oh) col("black%85")) ///
>            (rcap high_netto low_netto id, msize(medlarge) lwidth(vthin) col("black%40")) ///
>            , graphregion(col(white)) yscale(range(1 4)) ylabel(1(0.5)4, nogrid) xscale(range(1 22)) /// 
>            xlabel(1(1)22, valuelabel angle(45) labsize(vsmall)) xtitle("") ///
>            ytitle("Monthly Earnings in 1,000€") /// 
>            legend(region(col(white)) col(1) ring(0) position(5) /// 
>            order(1 "Mean" 2 "95%-CI") size(vsmall) symxsize(6)) /// 
>            

. graph export "./Output/Graphs/figureA3_2.png", replace          
(file ./Output/Graphs/figureA3_2.png written in PNG format)

. 
. *-------------------------------------------------------------------------------
. * SF6D Distributions Graphs, Figure A4.1, Panel a) and b)
. *-------------------------------------------------------------------------------
. 
. * Load Dataset
. use "./Data_panel/SOEP_merged_finalIMPUTATION_hstate.dta", replace 
(SOEP-Core, v35, doi:10.5684/soep-core.v35)

. 
. * Generate locals for mean lines 
. sum     sf12ind_UK              if hstate_sample==0

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
  sf12ind_UK |    123,521    .7390692    .1289072       .345          1

. local   mean_rest       =       r(mean) 

. sum     sf12ind_UK              if hstate_sample==1

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
  sf12ind_UK |     48,861    .7020064    .1261858       .345          1

. local   mean_hstate =   r(mean)

. sum     sf12ind_UK              if hstate_sample==1 & hstate_good==1

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
  sf12ind_UK |     35,401    .7365528    .1184811       .345          1

. local   mean_good       =       r(mean)

. sum     sf12ind_UK              if hstate_sample==1 & hstate_bad==1

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
  sf12ind_UK |     13,460    .6111464    .0974009       .345          1

. local   mean_bad        =       r(mean)         

. 
. * Graph: SF6D Non health state change sample vs hstate sample
. graph twoway    (hist sf12ind_UK if hstate_sample==0, color("black%20") width(0.025)) ///
>                                 (hist sf12ind_UK if hstate_sample==1, fcolor(none) lcolor(black) width(0.025)), ///
>                                 graphregion(color(white)) ytitle("Density") xtitle("SF-6D Utility") ///
>                                 legend(col(1) ring(0) position(11) order(1 "Stable Health" 2 "Changing Health") size(s
> mall) symxsize(4)) ///
>                                 xline(`mean_rest', lcol("black%35") lpattern(dash_dot)) xline(`mean_hstate', lcol(blac
> k) lpattern(dash_dot)) ///
>                                 title("(a) SF-6D by Health Trajectory", size(medium) col(black)) saving(sf6d_hchange, 
> replace)  
(note: file sf6d_hchange.gph not found)
(file sf6d_hchange.gph saved)

.                                 
. * Graph: SF6D Hstate sample: Good Health vs Bad Health
. graph twoway    (hist sf12ind_UK if hstate_sample==1 & hstate_good==1, color("black%20") width(0.025)) ///
>                                 (hist sf12ind_UK if hstate_sample==1 & hstate_bad==1, fcolor(none) lcolor(black) width
> (0.025)), ///
>                                 graphregion(color(white)) ytitle("Density") xtitle("SF-6D Utility") ///
>                                 legend(col(1) ring(0) position(11) order(1 "Good Health" 2 "Bad Health") size(small) s
> ymxsize(4)) ///
>                                 xline(`mean_good', lcol("black%35") lpattern(dash_dot)) xline(`mean_bad', lcol(black) 
> lpattern(dash_dot)) ///
>                                 title("(b) SF-6D by Health State", size(medium) col(black))     saving(sf6d_hstate, re
> place)
(note: file sf6d_hstate.gph not found)
(file sf6d_hstate.gph saved)

.                                                         
. *-------------------------------------------------------------------------------
. * Income Distribution Graphs, Figure A4.1, Panel c) and d) 
. *-------------------------------------------------------------------------------
. drop if hstate_sample==0
(123,521 observations deleted)

. drop if obs_count!=1
(43,749 observations deleted)

. 
. sum             mean_inc_good_fl        

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
mean_inc_g~l |      5,112    1.936209    1.013536   .2803987   18.05732

. local   mean_good = r(mean)

. sum             mean_inc_bad_fl 

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
mean_inc_b~l |      5,112    1.924354    1.045167   .2170005   20.17647

. local   mean_bad = r(mean)

. 
. * Graph: Within-person income mean 
. graph twoway    (hist mean_inc_good_fl if hstate_good==1, color("black%20") width(0.4)) ///                           
>   
>                                 (hist mean_inc_bad_fl if hstate_bad==1, fcolor(none) lcolor(black) width(0.4)), ///
>                                 graphregion(color(white)) ytitle("Density") xtitle("Mean Income (within person)") ///
>                                 legend(col(1) ring(0) position(1) order(1 "Good Health" 2 "Bad Health") size(small) sy
> mxsize(4)) ///
>                                 title("(c) Incomes by Health State", size(medium) col(black))   saving(inc_hstate, rep
> lace)
(note: file inc_hstate.gph not found)
(file inc_hstate.gph saved)

.                                 
. * Graph: Income good health and bad health      
. sum             inc_ratio if nworking==0

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
   inc_ratio |      3,391    1.019519    .2653084   .2475591   3.702075

. local   lower = r(mean)-r(sd)

. 
. * Graph: Income ratio good health and bad health                        
. graph twoway (hist inc_ratio, color(black%20) width(0.1)), /// 
>                          graphregion(color(white)) ytitle("Density") xtitle("Income Ratio Bad Health/Good Health") ///
>                          xline(`lower', lcol(black) lpattern(dash_dot)) ///
>                          title("(d) Income Changes", size(medium) col(black)) saving(incratio_hstate, replace)
(note: file incratio_hstate.gph not found)
(file incratio_hstate.gph saved)

. 
. *-------------------------------------------------------------------------------
. * Figure A4.1
. *-------------------------------------------------------------------------------                         
.                          
. * Combine Graphs
. graph combine sf6d_hchange.gph sf6d_hstate.gph inc_hstate.gph incratio_hstate.gph, imargin(1 1 1 1)     graphregion(co
> l(white)) 

. 
. graph export "./Output/Graphs/figureA4_1.png", replace
(file ./Output/Graphs/figureA4_1.png written in PNG format)

. 
. erase           ./sf6d_hchange.gph

. erase           ./sf6d_hstate.gph

. erase           ./inc_hstate.gph

. erase           ./incratio_hstate.gph   

. 
. *-------------------------------------------------------------------------------
. * Good/Bad Health Component Scores, Figure A4.2
. *-------------------------------------------------------------------------------
. 
. * Load Dataset to explore health-change related attrition 
. use     "./Data_panel/SOEP_merged_finalIMPUTATION_hstate.dta", replace 
(SOEP-Core, v35, doi:10.5684/soep-core.v35)

. 
. sort    pid syear

. 
. drop if hstate_sample==0
(123,521 observations deleted)

. 
. preserve

. by pid: keep if _n==1 
(43,749 observations deleted)

. 
. * Calculate Mean change levels for later plotting
. sum     mcs_change 

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
  mcs_change |      5,112    7.897508    5.124917   .0951576   40.06544

. local   mcs_change_mean = r(mean)

. sum pcs_change 

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
  pcs_change |      5,112    6.464171    4.324927   .0379524   32.01415

. local   pcs_change_mean = r(mean)

. 
. * Main Graph: Scatterplot Mental vs Physical  Health Changes
. graph twoway scatter mcs_change pcs_change, msize(0.5) mcolor("black%15") jitter(1) ///
>                                 xtitle("Physical Score Change") ytitle("") ylabel(, grid gmax) ///
>                                 xline(`pcs_change_mean', lcol(black) lpattern(dash) lwidth(0.15)) /// 
>                                 yline(`mcs_change_mean', lcol(black) lpattern(dash) lwidth(0.15)) ///
>                                 yscale(range(0,40) alt noline) xscale(range(0,32) alt noline) xlabel(, grid gmax) ///
>                                 graphregion(col(white)) saving(scorechange_scatter, replace) 
(note: file scorechange_scatter.gph not found)
(file scorechange_scatter.gph saved)

.                                 
. * Supplementary Graph 1: Mental Score Change                            
. graph twoway hist mcs_change, horizontal width(1) col("black%35") xscale(alt reverse noline) ///
>                                 yline(`mcs_change_mean', lcol(black) lpattern(dash) lwidth(0.15)) ///
>                                 yscale(range(0,40) noline) ylabel(, gmax) xlabel(0(0.05)0.1) ///
>                                 fxsize(25) ytitle("Mental Score Change") xtitle("") ///
>                                 graphregion(col(white)) saving(scorechange_hist_mcs, replace)
(note: file scorechange_hist_mcs.gph not found)
(file scorechange_hist_mcs.gph saved)

.                                 
. * Supplementary Graph 2: Physical Score Change                          
. graph twoway hist pcs_change, width(1) col("black%35") yscale(alt reverse noline) ///
>                                 xscale(noline) xtitle("") ytitle("") fysize(25) ytitle("") xscale(range(0,32)) ///
>                             xlabel(, grid gmax) xline(`pcs_change_mean', lcol(black) lpattern(dash) lwidth(0.15)) ///
>                                 graphregion(col(white)) saving(scorechange_hist_pcs, replace)                         
>   
(note: file scorechange_hist_pcs.gph not found)
(file scorechange_hist_pcs.gph saved)

. 
. * Combine Graphs
. graph combine scorechange_hist_mcs.gph scorechange_scatter.gph scorechange_hist_pcs.gph ///
>                                 , hole(3) imargin(0 0 0 0) graphregion(margin(l=1 r=1)) graphregion(col(white)) 

. 
. graph export  "./Output/Graphs/figureA4_2.png", replace 
(file ./Output/Graphs/figureA4_2.png written in PNG format)

. 
. erase   ./scorechange_hist_mcs.gph

. erase   ./scorechange_hist_pcs.gph

. erase   ./scorechange_scatter.gph                               

. 
. restore

. 
. *===============================================================================
. * End Program
. *===============================================================================
. capture log close
